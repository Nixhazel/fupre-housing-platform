'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import {
	Users,
	Search,
	Filter,
	Plus,
	Calendar,
	User,
	Heart,
	MessageCircle
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/shared/Badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
	Sheet,
	SheetContent,
	SheetHeader,
	SheetTitle,
	SheetTrigger
} from '@/components/ui/sheet';
import { useRoommatesStore } from '@/lib/store/roommatesSlice';
import { useAuthStore } from '@/lib/store/authSlice';
import { formatNaira } from '@/lib/utils/currency';

import { EmptyState } from '@/components/shared/EmptyState';
import { RoommateFilters } from '@/components/roommate/RoommateFilters';
import { canCreateRoommateListings } from '@/lib/utils/guards';
import { ClientOnly } from '@/components/providers/ClientOnly';

function RoommatesContent() {
	const {
		filters,
		searchQuery,
		setFilters,
		setSearchQuery,
		getFilteredRoommateListings
	} = useRoommatesStore();
	const { user } = useAuthStore();

	const [isFilterOpen, setIsFilterOpen] = useState(false);
	const [activeTab, setActiveTab] = useState('find');

	const filteredListings = getFilteredRoommateListings();

	const handleSearch = (e: React.FormEvent) => {
		e.preventDefault();
		// Search is handled by the store
	};

	const toggleFavorite = (listingId: string) => {
		// TODO: Implement favorite functionality
		console.log('Toggle favorite:', listingId);
	};

	const canCreate = user && canCreateRoommateListings(user.role);

	return (
		<div className='container mx-auto px-4 py-8'>
			{/* Header */}
			<div className='mb-8'>
				<h1 className='text-3xl font-bold mb-4'>Find Your Perfect Roommate</h1>
				<p className='text-muted-foreground'>
					Connect with fellow FUPRE students and property owners looking for
					roommates
				</p>
			</div>

			{/* Tabs */}
			<Tabs value={activeTab} onValueChange={setActiveTab} className='mb-8'>
				<TabsList className='grid w-full grid-cols-2'>
					<TabsTrigger value='find'>Find a Roommate</TabsTrigger>
					<TabsTrigger value='owner'>I&apos;m an Owner</TabsTrigger>
				</TabsList>

				{/* Find a Roommate Tab */}
				<TabsContent value='find' className='space-y-6'>
					{/* Search and Filters */}
					<div className='space-y-4'>
						{/* Search Bar */}
						<form onSubmit={handleSearch} className='flex gap-4'>
							<div className='flex-1 relative'>
								<Search className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />
								<Input
									type='text'
									placeholder='Search by preferences, budget, or location...'
									value={searchQuery}
									onChange={(e) => setSearchQuery(e.target.value)}
									className='pl-10'
								/>
							</div>

							{/* Mobile Filter Button */}
							<Sheet open={isFilterOpen} onOpenChange={setIsFilterOpen}>
								<SheetTrigger asChild>
									<Button variant='outline' className='md:hidden'>
										<Filter className='h-4 w-4 mr-2' />
										Filters
									</Button>
								</SheetTrigger>
								<SheetContent side='left' className='w-80'>
									<SheetHeader>
										<SheetTitle>Filter Roommates</SheetTitle>
									</SheetHeader>
									<div className='mt-6'>
										<RoommateFilters
											filters={filters}
											onFiltersChange={setFilters}
											onClose={() => setIsFilterOpen(false)}
										/>
									</div>
								</SheetContent>
							</Sheet>
						</form>

						{/* Desktop Filters */}
						<div className='hidden md:block'>
							<RoommateFilters filters={filters} onFiltersChange={setFilters} />
						</div>
					</div>

					{/* Results */}
					<div className='mb-4 flex items-center justify-between'>
						<p className='text-muted-foreground'>
							{filteredListings.filter((l) => l.ownerType === 'student').length}{' '}
							roommate
							{filteredListings.filter((l) => l.ownerType === 'student')
								.length !== 1
								? 's'
								: ''}{' '}
							found
						</p>
					</div>

					{/* Roommate Listings */}
					{filteredListings.filter((l) => l.ownerType === 'student').length ===
					0 ? (
						<EmptyState
							icon={Users}
							title='No roommates found'
							description='Try adjusting your search criteria or filters to find more results.'
							action={{
								label: 'Clear Filters',
								onClick: () => {
									setSearchQuery('');
									setFilters({
										budgetRange: [0, 100000]
									});
								}
							}}
						/>
					) : (
						<div className='grid md:grid-cols-2 lg:grid-cols-3 gap-6'>
							{filteredListings
								.filter((l) => l.ownerType === 'student')
								.map((listing, index) => (
									<motion.div
										key={listing.id}
										initial={{ opacity: 0, y: 20 }}
										animate={{ opacity: 1, y: 0 }}
										transition={{ duration: 0.3, delay: index * 0.1 }}>
										<Link href={`/roommates/${listing.id}`}>
											<Card className='overflow-hidden hover:shadow-lg transition-shadow group cursor-pointer'>
											<div className='relative'>
												{listing.photos.length > 0 && (
													<img
														src={listing.photos[0]}
														alt={listing.title}
														className='w-full h-48 object-cover group-hover:scale-105 transition-transform'
													/>
												)}

												{/* Favorite Button */}
												<Button
													variant='ghost'
													size='sm'
													className='absolute top-2 right-2 bg-white/80 hover:bg-white'
													onClick={() => toggleFavorite(listing.id)}>
													<Heart className='h-4 w-4' />
												</Button>
											</div>

											<CardContent className='p-4 space-y-3'>
												<h3 className='font-semibold line-clamp-1'>
													{listing.title}
												</h3>

												<div className='flex items-center justify-between'>
													<span className='text-lg font-bold text-primary'>
														{formatNaira(listing.budgetMonthly)}/month
													</span>
													<Badge variant='outline'>
														{listing.ownerType === 'student'
															? 'Student'
															: 'Owner'}
													</Badge>
												</div>

												{/* Preferences */}
												<div className='space-y-2'>
													{listing.preferences.gender && (
														<div className='flex items-center space-x-2 text-sm'>
															<User className='h-4 w-4 text-muted-foreground' />
															<span>
																Looking for: {listing.preferences.gender}
															</span>
														</div>
													)}
													{listing.preferences.cleanliness && (
														<div className='flex items-center space-x-2 text-sm'>
															<span className='text-muted-foreground'>
																Cleanliness:
															</span>
															<Badge variant='outline' className='text-xs'>
																{listing.preferences.cleanliness}
															</Badge>
														</div>
													)}
													<div className='flex items-center space-x-2 text-sm text-muted-foreground'>
														<Calendar className='h-4 w-4' />
														<span>
															Move-in:{' '}
															{new Date(
																listing.moveInDate
															).toLocaleDateString()}
														</span>
													</div>
												</div>

												<p className='text-sm text-muted-foreground line-clamp-2'>
													{listing.description}
												</p>

												<div className='flex gap-2'>
													<Button className='flex-1' size='sm'>
														View Details
													</Button>
													<Button variant='outline' size='sm'>
														<MessageCircle className='h-4 w-4' />
													</Button>
												</div>
											</CardContent>
										</Card>
										</Link>
									</motion.div>
								))}
						</div>
					)}
				</TabsContent>

				{/* I&apos;m an Owner Tab */}
				<TabsContent value='owner' className='space-y-6'>
					{/* Search and Filters */}
					<div className='space-y-4'>
						{/* Search Bar */}
						<form onSubmit={handleSearch} className='flex gap-4'>
							<div className='flex-1 relative'>
								<Search className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />
								<Input
									type='text'
									placeholder='Search by preferences, budget, or location...'
									value={searchQuery}
									onChange={(e) => setSearchQuery(e.target.value)}
									className='pl-10'
								/>
							</div>
						</form>
					</div>

					{/* Results */}
					<div className='mb-4 flex items-center justify-between'>
						<p className='text-muted-foreground'>
							{filteredListings.filter((l) => l.ownerType === 'owner').length}{' '}
							owner
							{filteredListings.filter((l) => l.ownerType === 'owner')
								.length !== 1
								? 's'
								: ''}{' '}
							found
						</p>
						{canCreate && (
							<Button asChild>
								<a href='/roommates/new'>
									<Plus className='h-4 w-4 mr-2' />
									Post Room Available
								</a>
							</Button>
						)}
					</div>

					{/* Owner Listings */}
					{filteredListings.filter((l) => l.ownerType === 'owner').length ===
					0 ? (
						<EmptyState
							icon={Users}
							title='No owners found'
							description='Try adjusting your search criteria or filters to find more results.'
							action={
								canCreate
									? {
											label: 'Post Your Room',
											onClick: () => (window.location.href = '/roommates/new')
									  }
									: undefined
							}
						/>
					) : (
						<div className='grid md:grid-cols-2 lg:grid-cols-3 gap-6'>
							{filteredListings
								.filter((l) => l.ownerType === 'owner')
								.map((listing, index) => (
									<motion.div
										key={listing.id}
										initial={{ opacity: 0, y: 20 }}
										animate={{ opacity: 1, y: 0 }}
										transition={{ duration: 0.3, delay: index * 0.1 }}>
										<Card className='overflow-hidden hover:shadow-lg transition-shadow group'>
											<div className='relative'>
												{listing.photos.length > 0 && (
													<img
														src={listing.photos[0]}
														alt={listing.title}
														className='w-full h-48 object-cover group-hover:scale-105 transition-transform'
													/>
												)}

												{/* Favorite Button */}
												<Button
													variant='ghost'
													size='sm'
													className='absolute top-2 right-2 bg-white/80 hover:bg-white'
													onClick={() => toggleFavorite(listing.id)}>
													<Heart className='h-4 w-4' />
												</Button>
											</div>

											<CardContent className='p-4 space-y-3'>
												<h3 className='font-semibold line-clamp-1'>
													{listing.title}
												</h3>

												<div className='flex items-center justify-between'>
													<span className='text-lg font-bold text-primary'>
														{formatNaira(listing.budgetMonthly)}/month
													</span>
													<Badge variant='outline'>
														{listing.ownerType === 'student'
															? 'Student'
															: 'Owner'}
													</Badge>
												</div>

												{/* Preferences */}
												<div className='space-y-2'>
													{listing.preferences.gender && (
														<div className='flex items-center space-x-2 text-sm'>
															<User className='h-4 w-4 text-muted-foreground' />
															<span>
																Looking for: {listing.preferences.gender}
															</span>
														</div>
													)}
													{listing.preferences.cleanliness && (
														<div className='flex items-center space-x-2 text-sm'>
															<span className='text-muted-foreground'>
																Cleanliness:
															</span>
															<Badge variant='outline' className='text-xs'>
																{listing.preferences.cleanliness}
															</Badge>
														</div>
													)}
													<div className='flex items-center space-x-2 text-sm text-muted-foreground'>
														<Calendar className='h-4 w-4' />
														<span>
															Move-in:{' '}
															{new Date(
																listing.moveInDate
															).toLocaleDateString()}
														</span>
													</div>
												</div>

												<p className='text-sm text-muted-foreground line-clamp-2'>
													{listing.description}
												</p>

												<div className='flex gap-2'>
													<Button className='flex-1' size='sm'>
														View Details
													</Button>
													<Button variant='outline' size='sm'>
														<MessageCircle className='h-4 w-4' />
													</Button>
												</div>
											</CardContent>
										</Card>
										</Link>
									</motion.div>
								))}
						</div>
					)}
				</TabsContent>
			</Tabs>
		</div>
	);
}

export default function RoommatesPage() {
	return (
		<ClientOnly
			fallback={
				<div className='min-h-screen bg-background'>
					<div className='container mx-auto px-4 py-8'>
						<div className='text-center'>
							<h1 className='text-3xl font-bold mb-4'>Roommates</h1>
							<p className='text-muted-foreground'>Loading...</p>
						</div>
					</div>
				</div>
			}>
			<RoommatesContent />
		</ClientOnly>
	);
}
